server.log("PSKFreqMonitor imp ready")

// These 5 pins used to display values 1-5
ledv1 <- hardware.pin9
ledv2 <- hardware.pin8
ledv3 <- hardware.pin7
ledv4 <- hardware.pin5
ledv5 <- hardware.pin2

// Pot for reading band
pot <- hardware.pin1

function setup() {
    ledv1.configure(DIGITAL_OUT)
    ledv2.configure(DIGITAL_OUT)
    ledv3.configure(DIGITAL_OUT)
    ledv4.configure(DIGITAL_OUT)
    ledv5.configure(DIGITAL_OUT)
    pot.configure(ANALOG_IN)
}

// If true, logs the value of the band adjuster pot for tuning
log_pot_values <- false

// Thresholds on the pot for selecting the band
thresholds <- [44602, 12200, 4160,2000,50]

// Current value of eacn indicator pin
pin_values <- [0,0,0,0,0]

// 5 output pins, all set to display a level value.
pins <- [ledv1, ledv2, ledv3, ledv4,ledv5]

// Currently selected band (0-5)
band_idx <- 0;

// Quality values (0-5) for each band
band_quality <- [0,0,0,0,0,0];

// Map the pot value to 0-5 based on the thresholds set above
// This lets us use a non-linear pot (which is what I happened to have wired u[)
function map_pot(raw_value) {
    if (log_pot_values) {
        server.log(raw_value)
        return 0
    }
    if (raw_value > thresholds[0]) {
        return 5
    } else if (raw_value > thresholds[1]) {
        return 4
    } else if (raw_value > thresholds[2]) {
        return 3
    } else if (raw_value > thresholds[3]) {
        return 2
    } else if (raw_value > thresholds[4]) {
        return 1
    }
    
    return 0
}

// Set the indicator to indicate a value from 0-5
function set_indicator(value=0)
{
    if (value < 0) {
        value = 0
        server.log("call to set_value with value < 0")
    } else if (value > 5) {
        value = 5
        server.log("call to set_value with value > 5")
    }

    for (local i=5; i > 0; i--) {
       if (value < i) {
            pin_values[i-1] = 0
            pins[i-1].write(0)
        } else {
            if (pin_values[i-1] == 0) {
                pin_values[i-1] = 1
                pins[i-1].write(1)
            }
        }
    }
}

function display_current_band() {
    local val = band_quality[band_idx]
    server.log("Changing to display value " + val)
    set_indicator(val)
}

function select_band(new_band_idx)
{
    if (new_band_idx != band_idx) {
        server.log("Switching band to " + new_band_idx)
        band_idx = new_band_idx
        display_current_band()
    }
}
 
function set_band(band_and_value) {
    local band = band_and_value[0]
    local val =  band_and_value[1]
    server.log("Setting " + band + " to " + val)
    band_quality[band] = val
    display_current_band()
}

function set_bands(new_quality) {
    local len = new_quality.len()
    if (len > band_quality.len()) {
        len = band_quality.len()
    }
    server.log("setting bands to " + new_quality)
    for (local i=0; i++; i < len) {
        band_quality[i] = new_quality[i]
    }

    display_current_band()
}

function poll()
{
    // Read the pin and convert its value to 1-
    local new_value = map_pot(pot.read());
    select_band(new_value)
 
    // Wake up in 0.1 seconds and do it again
    imp.wakeup(0.1, poll)
}
 
// Start the loop
agent.on("set_bands", set_bands)
agent.on("set_band", set_band)
setup()

poll()
